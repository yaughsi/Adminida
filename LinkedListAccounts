package AdminLib;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Random;

public class LinkedListAccounts {
    private NodeAccounts head;
    private final int maxSize = 100;
    private int size = 0;
    private final Random random = new Random();
    private final ArrayList<NodeAccounts> blockedAccounts = new ArrayList<>();

    public LinkedListAccounts() {
        this.head = null;
    }

    private String generateRandomID(String role) {
        char rolePrefix;
        switch (role.toLowerCase()) {
            case "admin":
                rolePrefix = 'A';
                break;
            case "librarian":
                rolePrefix = 'L';
                break;
            case "user":
                rolePrefix = 'U';
                break;
            default:
                throw new IllegalArgumentException("Invalid role: " + role);
        }

        int uniqueNumber;
        String uniqueID;
        do {
            uniqueNumber = 10000000 + random.nextInt(90000000);
            uniqueID = rolePrefix + String.valueOf(uniqueNumber);
        } while (!isUniqueID(uniqueID));
        return uniqueID;
    }

    private boolean isUniqueID(String uniqueID) {
        NodeAccounts current = head;
        while (current != null) {
            if (current.memberID.equals(uniqueID)) {
                return false;
            }
            current = current.next;
        }
        return true;
    }

    public boolean isFull() {
        return size >= maxSize;
    }

    public void insertAtBeginning(String userName, String password, String eMail, String contactNum, String role) {
        if (isFull()) {
            System.out.println("List is full. Cannot add more accounts.");
            return;
        }
        if (role == null || role.isEmpty()) {
            System.out.println("Role cannot be empty.");
            return;
        }
        String memberID = generateRandomID(role);
        NodeAccounts newNode = new NodeAccounts(userName, password, eMail, contactNum, memberID, role);
        newNode.next = head;
        head = newNode;
        size++;
    }

    public void deleteAtEnd() {
        if (head == null) {
            System.out.println("List is empty. Nothing to delete.");
            return;
        }

        if (head.next == null) {
            head = null;
        } else {
            NodeAccounts current = head;
            while (current.next.next != null) {
                current = current.next;
            }
            current.next = null;
        }
        size--;
    }

    public void deleteAtPosition(int position) {
        if (position < 0 || position >= size) {
            System.out.println("Invalid position.");
            return;
        }

        int choice = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete this account?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (choice == JOptionPane.NO_OPTION) {
            System.out.println("Deletion canceled.");
            return;
        }

        if (position == 0) {
            head = head.next;
        } else {
            NodeAccounts current = head;
            for (int i = 0; i < position - 1 && current != null; i++) {
                current = current.next;
            }

            if (current == null || current.next == null) {
                System.out.println("Invalid position.");
                return;
            }

            current.next = current.next.next;
        }
        size--;
    }

    public void createAccount(String userName, String password, String eMail, String contactNum, String role) {
        if (isFull()) {
            System.out.println("List is full. Cannot create new account.");
            return;
        }
        if (role == null || role.isEmpty()) {
            System.out.println("Role cannot be empty.");
            return;
        }
        String memberID = generateRandomID(role);
        NodeAccounts newNode = new NodeAccounts(userName, password, eMail, contactNum, memberID, role);

        if (head == null) {
            head = newNode;
        } else {
            NodeAccounts current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }

    public NodeAccounts getHead() {
        return head;
    }

    public NodeAccounts linearSearch(String userName) {
        NodeAccounts current = head;
        while (current != null) {
            if (current.userName.equals(userName)) {
                return current;
            }
            current = current.next;
        }
        JOptionPane.showMessageDialog(null, "User does not exist", "Error", JOptionPane.ERROR_MESSAGE);
        return null;
    }
    
     // Method to convert linked list to array for other operations
   public NodeAccounts[] toArray() {
    // First, find the size of the LinkedList to create the array
    int size = 0;
    NodeAccounts current = head;  // head is the first book in the list

    // Traverse the linked list to calculate its size
    while (current != null) {
        size++;
        current = current.getNext();
    }
    // Create an array to hold the books
    NodeAccounts[] accountArray = new NodeAccounts[size];

    // Now, fill the array with data from the LinkedList
    current = head;  // Start again from the head
    int index = 0;
    while (current != null) {
        accountArray[index] = current;  // Copy the book node into the array
        index++;
        current = current.getNext();  // Move to the next node in the linked list
    }

    return accountArray;
}
   public Object[][] getAccountData() {
        Object[][] accountData = new Object[size][5];  // Assuming 5 columns: Title, Author, ISBN, Genre, Availability
        NodeAccounts current = head;
        int index = 0;
        while (current != null) {
            accountData[index][0] = current.getMemberID();
            accountData[index][1] = current.getUserName();
            accountData[index][2] = current.getEmail();
            accountData[index][3] = current.getContactNum();
            accountData[index][4] = current.getRole();
            current = current.next;
            index++;
        }
        return accountData;
    }
   public Object[][] sortByRole() {
        NodeAccounts[] accountArray = toArray();
        quickSortByRole(accountArray, 0, accountArray.length - 1);

        Object[][] sortedAccounts = new Object[accountArray.length][5];
        for (int i = 0; i < accountArray.length; i++) {
            sortedAccounts[i][0] = accountArray[i].getMemberID();
            sortedAccounts[i][1] = accountArray[i].getUserName();
            sortedAccounts[i][2] = accountArray[i].getEmail();
            sortedAccounts[i][3] = accountArray[i].getContactNum();
            sortedAccounts[i][4] = accountArray[i].getRole();
        }
        return sortedAccounts;
    }

    private void quickSortByRole(NodeAccounts[] array, int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);

            quickSortByRole(array, low, pi - 1);
            quickSortByRole(array, pi + 1, high);
        }
    }

    private int partition(NodeAccounts[] array, int low, int high) {
        String pivot = array[high].getRole();
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (array[j].getRole().compareTo(pivot) < 0) {
                i++;
                NodeAccounts temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        NodeAccounts temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;

        return i + 1;
    }
   public boolean isBlocked(String role ) {
       for (NodeAccounts account : blockedAccounts ) {
           if (account.userName.equals(username)) {
               return true;
           }
       }
       return false;
   }
   public void unblockAccount(String userName) {
        NodeAccounts toUnblock = null;
        for (NodeAccounts account : blockedAccounts) {
            if (account.userName.equals(userName)) {
                toUnblock = account;
                break;
            }
        }

        if (toUnblock != null) {
            blockedAccounts.remove(toUnblock);
            JOptionPane.showMessageDialog(null, "Account unblocked successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Account not found in blocked list.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
   

  
    }
