package AdminLib;

import javax.swing.JOptionPane;

public class LinkedListAccounts{
    private NodeAccounts head;
    private final int maxSize = 100; 
    private int size = 0;

    public LinkedListAccounts() {
        this.head = null;
    }
    
    
    private int generateRandomID() {
        int memberID;
        do {
            memberID = (int) (Math.random() * 90000000) + 10000000;
        } while (!isUniqueID(memberID));
        return memberID;
    }

    private boolean isUniqueID(int memberID) {
        NodeAccounts current = head;
        while (current != null) {
            if (current.memberID == memberID) {
                return false;
            }
            current = current.next;
        }
        return true;
    }

    public boolean isFull() {
        return size >= maxSize;
    }

    public void insertAtBeginning(String userName, String password, String eMail, String contactNum, String role) {
        if (isFull()) {
            System.out.println("List is full. Cannot add more accounts.");
            return;
        }
        int memberID = generateRandomID();
        NodeAccounts newNode = new NodeAccounts(userName, password, eMail, contactNum, memberID, role);
        newNode.next = head;
        head = newNode;
        size++;
    }

    public void deleteAtEnd() {
        if (head == null) {
            System.out.println("List is empty. Nothing to delete.");
            return;
        }

        if (head.next == null) {
            head = null;
        } else {
            NodeAccounts current = head;
            while (current.next.next != null) {
                current = current.next;
            }
            current.next = null;
        }
        size--;
    }

    public void deleteAtPosition(int position) {
    if (position < 0 || position >= size) {
        System.out.println("Invalid position.");
        return;
    }

    int choice = JOptionPane.showConfirmDialog(null, 
        "Are you sure you want to delete this account?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

    if (choice == JOptionPane.NO_OPTION) {
        System.out.println("Deletion canceled.");
        return;
    }

    if (position == 0) {
        head = head.next; 
    } else {
        NodeAccounts current = head;
        for (int i = 0; i < position - 1 && current != null; i++) {
            current = current.next;
        }

        if (current == null || current.next == null) {
            System.out.println("Invalid position.");
            return;
        }

        current.next = current.next.next; 
    }
    size--;
}


    public void createAccount(String userName, String password, String eMail, String contactNum, String role) {
       
        if (isFull()) {
            System.out.println("List is full. Cannot create new account.");
            return;
        }
        int memberID = generateRandomID();
        NodeAccounts newNode = new NodeAccounts(userName, password, eMail, contactNum, memberID, role);

        if (head == null) {
            head = newNode;
        } else {
            NodeAccounts current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
        size++;
    }

    public NodeAccounts getHead() {
        return head;
    }
    
     public NodeAccounts LinearSeach(String userName) {
        NodeAccounts current = head;
        while (current != null) {
            if (current.userName == userName) {
                return current;
            }
            else if (current.userName != userName) {
                JOptionPane.showMessageDialog(null, " User does not exist", "Error", JOptionPane.ERROR_MESSAGE);
            }
            current = current.next;
        }
        return null;
    }

}
