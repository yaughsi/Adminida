package AdminLib;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.table.DefaultTableModel;

public class adminReports extends JFrame {
    private JPanel pan3 = new JPanel();
    private JPanel pan4 = new JPanel();
    private JPanel pan4_5 = new JPanel();
    private JLabel genrep = new JLabel("Generate Reports");
    private JLabel datelbl = new JLabel("Report Date");
    private JLabel mostborrlbl = new JLabel("Most Borrowed Books");
    private JLabel totalborrlbl = new JLabel("Total Borrowed Books");
    private JLabel totalfinelbl = new JLabel("Total Fine");
    private JLabel cat = new JLabel("Category");
    private JTable table = new JTable();
    private JScrollPane scpreports = new JScrollPane(table);
    private JTextField datef = new JTextField();
    private JTextField mostborrf = new JTextField();
    private JTextField totalborrf = new JTextField();
    private JTextField totalfinef = new JTextField();
    private JComboBox<String> categoryBox = new JComboBox<>(new String[]{"Weekly", "Monthly", "Yearly"});
    private JButton updatebtn = new JButton("Update Report");
    private JButton viewbtn = new JButton("View Report");
    private JButton backbtnReports = new JButton("Back");

    // Linked lists for weekly, monthly, yearly reports
    private LinkedListBookReport weeklyReports = new LinkedListBookReport();
    private LinkedListBookReport monthlyReports = new LinkedListBookReport();
    private LinkedListBookReport yearlyReports = new LinkedListBookReport();

    static String col[] = {"DATE", "MOST BORROWED BOOK", "TOTAL BORROWED BOOKS", "TOTAL FINE"};
    static DefaultTableModel reporttab = new DefaultTableModel(col, 0);

    private String date, mostBorrowed;
    private int totalBooksBorrowed;
    private double totalFine;

    public adminReports(String date, String mostBorrowedBook, int totalBooksBorrowed, double totalFineCollected) {
        this.date = date;
        this.mostBorrowed = mostBorrowedBook;
        this.totalBooksBorrowed = totalBooksBorrowed;
        this.totalFine = totalFineCollected;
    }

     public adminReports() {
        weeklyReports.insertAtEnd("2024-11-01", "Book A", 100, 50.0);
        weeklyReports.insertAtEnd("2024-11-08", "Book B", 120, 60.0);
        weeklyReports.insertAtEnd("2024-11-15", "Book C", 80, 40.0);

        monthlyReports.insertAtEnd("2024-10", "Book D", 300, 150.0);
        monthlyReports.insertAtEnd("2024-09", "Book E", 350, 200.0);

        yearlyReports.insertAtEnd("2023", "Book F", 1200, 600.0);
        yearlyReports.insertAtEnd("2022", "Book G", 1500, 750.0);

        pan3.setBackground(new Color(0x6F1D1B));
        pan3.setLayout(null);
        pan3.setPreferredSize(new Dimension(800, 875));

        pan4.setBackground(new Color(0x99582A));
        pan4.setLayout(null);
        pan4.setBounds(850, 86, 700, 875);
        
        pan4_5.setLayout(null);
        pan4_5.setBackground(new Color(0xD9D9D9));
        pan4_5.setBounds(0, 0, 1530, 86);

        genrep.setBounds(70, 21, 560, 77);
        genrep.setFont(new Font("Bebas Neue", Font.BOLD, 64));
        genrep.setForeground(new Color(0xBB9457));

        table.setModel(reporttab);
        scpreports.setBounds(35, 145, 780, 490);
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = table.getSelectedRow();
                datef.setText(reporttab.getValueAt(row, 0).toString());
                mostborrf.setText(reporttab.getValueAt(row, 1).toString());
                totalborrf.setText(reporttab.getValueAt(row, 2).toString());
                totalfinef.setText(reporttab.getValueAt(row, 3).toString());
            }
        });

        datelbl.setBounds(20, 228, 300, 30);
        datelbl.setFont(new Font("Cambria", Font.BOLD, 30));
        datelbl.setForeground(new Color(0xBB9457));

        mostborrlbl.setBounds(20, 278, 480, 30);
        mostborrlbl.setFont(new Font("Cambria", Font.BOLD, 30));
        mostborrlbl.setForeground(new Color(0xBB9457));

        totalborrlbl.setBounds(20, 328, 480, 30);
        totalborrlbl.setFont(new Font("Cambria", Font.BOLD, 30));
        totalborrlbl.setForeground(new Color(0xBB9457));

        totalfinelbl.setBounds(20, 378, 480, 30);
        totalfinelbl.setFont(new Font("Cambria", Font.BOLD, 30));
        totalfinelbl.setForeground(new Color(0xBB9457));

        cat.setBounds(20, 420, 480, 40);
        cat.setFont(new Font("Cambria", Font.BOLD, 30));
        cat.setForeground(new Color(0xBB9457));

        datef.setBounds(350, 228, 250, 30);
        datef.setFont(new Font("Cambria", Font.BOLD, 15));
        mostborrf.setBounds(350, 278, 250, 30);
        mostborrf.setFont(new Font("Cambria", Font.BOLD, 15));
        totalborrf.setBounds(350, 328, 250, 30);
        totalborrf.setFont(new Font("Cambria", Font.BOLD, 15));
        totalfinef.setBounds(350, 378, 250, 30);
        totalfinef.setFont(new Font("Cambria", Font.BOLD, 15));

        categoryBox.setBounds(350, 428, 250, 30);
        categoryBox.setFont(new Font("Cambria", Font.BOLD, 15));
        
        backbtnReports.setBounds(460, 690, 310, 88);
        backbtnReports.setBackground(new Color(0xD9D9D9));
        backbtnReports.setFont(new Font("Bebas Neue", Font.BOLD, 30));
        backbtnReports.setForeground(new Color(0x6F1D1B));
        
        updatebtn.setBounds(290, 480, 310, 88);
        updatebtn.setBackground(new Color(0xD9D9D9));
        updatebtn.setFont(new Font("Cambria", Font.BOLD, 30));
        updatebtn.setForeground(new Color(0x6F1D1B));
        updatebtn.addActionListener(e -> updateReport());

        viewbtn.setBounds(120, 690, 310, 88);
        viewbtn.setBackground(new Color(0xD9D9D9));
        viewbtn.setFont(new Font("Bebas Neue", Font.BOLD, 30));
        viewbtn.setForeground(new Color(0x6F1D1B));
        viewbtn.addActionListener(e -> viewReport());
        
        //backbtnReports.setBounds

        pan3.add(pan4);
        pan3.add(pan4_5);
        pan3.add(scpreports);
        pan3.add(backbtnReports);
        pan3.add(viewbtn);
        
        pan4.add(genrep);
        pan4.add(datelbl);
        pan4.add(mostborrlbl);
        pan4.add(totalborrlbl);
        pan4.add(totalfinelbl);
        pan4.add(cat);
        pan4.add(datef);
        pan4.add(mostborrf);
        pan4.add(totalborrf);
        pan4.add(totalfinef);
        pan4.add(categoryBox);
        pan4.add(updatebtn);

        this.add(pan3);
        this.setSize(1537, 875);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setTitle("Generate Reports");
        this.setResizable(false);
    }

 private void updateReport() {
        try {
            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                throw new Exception("No row selected.");
            }

            String date = datef.getText();
            String mostBorrowedBook = mostborrf.getText();
            int totalBorrowedBooks = Integer.parseInt(totalborrf.getText());
            double totalFine = Double.parseDouble(totalfinef.getText());

            String category = (String) categoryBox.getSelectedItem();
            if ("Weekly".equals(category)) {
                weeklyReports.updateReport(selectedRow, date, mostBorrowedBook, totalBorrowedBooks, totalFine);
            } else if ("Monthly".equals(category)) {
                monthlyReports.updateReport(selectedRow, date, mostBorrowedBook, totalBorrowedBooks, totalFine);
            } else if ("Yearly".equals(category)) {
                yearlyReports.updateReport(selectedRow, date, mostBorrowedBook, totalBorrowedBooks, totalFine);
            }

            JOptionPane.showMessageDialog(this, "Report updated successfully.");
            viewReport();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating report: " + e.getMessage());
        }
    }

    private void viewReport() {
        String category = (String) categoryBox.getSelectedItem();
        if ("Weekly".equals(category)) {
            weeklyReports.displayReports(reporttab);
        } else if ("Monthly".equals(category)) {
            monthlyReports.displayReports(reporttab);
        } else if ("Yearly".equals(category)) {
            yearlyReports.displayReports(reporttab);
        }
    }
    public static void main(String[] args) {
        adminReports adm = new adminReports();
        adm.setVisible(true);
    }
}

